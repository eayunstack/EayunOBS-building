From e3e33e8224972b19b430e4f6fc32c390641d9ec6 Mon Sep 17 00:00:00 2001
From: Zhao Chao <zhaochao1984@gmail.com>
Date: Thu, 31 Dec 2015 17:47:19 +0800
Subject: [PATCH 15/21] eayunrgw: implement EayunOBS HA and LB setup function.

Signed-off-by: Zhao Chao <zhaochao1984@gmail.com>
---
 ceph_deploy/eayunrgw.py | 445 +++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 441 insertions(+), 4 deletions(-)

diff --git a/ceph_deploy/eayunrgw.py b/ceph_deploy/eayunrgw.py
index df492ad..63451aa 100644
--- a/ceph_deploy/eayunrgw.py
+++ b/ceph_deploy/eayunrgw.py
@@ -1,4 +1,5 @@
 import os
+import time
 import re
 import errno
 from ceph_deploy.cliutil import priority
@@ -67,6 +68,62 @@ ZONE_CONTECT = '''{ "domain_root": ".%(zone)s.domain.rgw",
       ]
     }'''
 
+HAPROXY_CONF_COMMON = '''global
+    log         127.0.0.1 local2
+
+    chroot      /var/lib/haproxy
+    pidfile     /var/run/haproxy.pid
+    maxconn     4000
+    user        haproxy
+    group       haproxy
+    daemon
+    stats socket /var/lib/haproxy/stats
+
+defaults
+    mode                    http
+    log                     global
+    option                  httplog
+    option                  dontlognull
+    option http-server-close
+    option forwardfor       except 127.0.0.0/8
+    option                  redispatch
+    retries                 3
+    timeout http-request    10s
+    timeout queue           1m
+    timeout connect         10s
+    timeout client          1m
+    timeout server          1m
+    timeout http-keep-alive 10s
+    timeout check           10s
+    maxconn                 3000
+
+listen Stats *:10000
+    mode http
+    stats enable
+    stats uri /
+    stats refresh 5s
+    stats show-node
+    stats show-legends
+    stats hide-version
+
+peers ceph_peers'''
+
+HAPROXY_PEER_CONTECT='    peer %(host)s %(host)s:8060'
+
+
+HAPROXY_ENDS_CONTECT='''
+frontend rgw_front
+    bind %s:%s
+    default_backend rgw_back
+
+backend rgw_back
+    balance roundrobin
+    option httpchk HEAD / HTTP/1.1\\r\\nHost:\ localhost
+    cookie RADOSGWLB insert indirect nocache
+    stick-table type ip size 1 nopurge size 50k expire 1d peers ceph_peers
+    stick on dst'''
+
+HAPROXY_SERVER_CONTECT='    server %(host)s %(host)s:8080 check cookie %(host)s'
 
 def get_exists_region(cfg):
     for sec in cfg.sections():
@@ -75,11 +132,12 @@ def get_exists_region(cfg):
     raise
 
 
-def get_hosts(cfg, zone_name):
+def get_hosts(cfg, zone_name=None):
     host_list = []
     for sec in cfg.sections():
-        if 'rgw_zone' in cfg.options(sec) and cfg.get(sec, 'rgw_zone') == zone_name:
-            host_list.append(cfg.get(sec, 'host'))
+        if 'rgw_zone' in cfg.options(sec):
+            if not zone_name or cfg.get(sec, 'rgw_zone') == zone_name:
+                host_list.append(cfg.get(sec, 'host'))
     return host_list
 
 
@@ -403,12 +461,332 @@ def eayunrgw_add(args):
     restart_serv(conn, gw_name)
 
 
+def create_haproxy_conf(hosts_list, vip, vport):
+    haproxy_conf = HAPROXY_CONF_COMMON
+    haproxy_conf_path = '/etc/haproxy/haproxy.cfg'
+
+    haproxy_peers = ''
+    haproxy_servers = HAPROXY_ENDS_CONTECT % (vip, vport)
+
+    for host in hosts_list:
+        haproxy_peers +='\n'
+        haproxy_peers += HAPROXY_PEER_CONTECT % {'host': host}
+        haproxy_servers += '\n'
+        haproxy_servers += HAPROXY_SERVER_CONTECT % {'host': host}
+
+    haproxy_peers += '\n'
+    haproxy_servers += '\n'
+
+    haproxy_conf += haproxy_peers + haproxy_servers
+
+    for host in hosts_list:
+        distro = hosts.get(host)
+        distro.conn.remote_module.write_file(
+            haproxy_conf_path,
+            haproxy_conf
+        )
+
+def init_pcs_cluster(hosts_list, vip, vip_cidr, hauser, hapass):
+    pcs_init_host = hosts_list[0]
+    distro = hosts.get(pcs_init_host)
+    conn = distro.conn
+
+    (_, _, ret) = remoto.process.check(
+        conn,
+        [
+            'pcs', 'cluster', 'auth',
+            '-u', hauser,
+            '-p', hapass
+        ] + hosts_list
+    )
+
+    if ret != 0:
+        raise exc.GenericError('Failed to initialize PCS cluster: auth\n')
+
+    (_, _, ret) = remoto.process.check(
+        conn,
+        [
+            'pcs', 'cluster', 'setup',
+            '--start', '--enable',
+            '--name', 'eayunobs-cluster'
+        ] + hosts_list
+    )
+
+    if ret != 0:
+        raise exc.GenericError('Failed to initialize PCS cluster: setup\n')
+
+    remoto.process.run(
+        conn,
+        [
+            'pcs', 'property', 'set',
+            'stonith-enabled=false',
+        ]
+    )
+
+    remoto.process.run(
+        conn,
+        [
+            'pcs', 'property', 'set',
+            'no-quorum-policy=ignore'
+        ]
+    )
+
+    remoto.process.run(
+        conn,
+        [
+            'pcs', 'resource', 'create',
+            'p_haproxy', 'systemd:haproxy',
+            'op', 'monitor', 'interval=5s',
+            '--clone'
+        ]
+    )
+
+    remoto.process.run(
+        conn,
+        [
+            'pcs', 'resource', 'create',
+            'p_ceph_rgw', 'lsb:ceph-radosgw',
+            'op', 'monitor', 'interval=5s',
+            '--clone'
+        ]
+    )
+
+    remoto.process.run(
+        conn,
+        [
+            'pcs', 'resource', 'create',
+            'p_httpd', 'systemd:httpd',
+            'op', 'monitor', 'interval=5s',
+            '--clone'
+        ]
+    )
+
+    remoto.process.run(
+        conn,
+        [
+            'pcs', 'resource', 'create',
+            'p_vip', 'ocf:heartbeat:IPaddr2', 'ip=%s' % vip,
+            'cidr_netmask=%s' % vip_cidr,
+            'op', 'monitor', 'interval=5s'
+        ]
+    )
+
+    remoto.process.run(
+        conn,
+        [
+            'pcs', 'constraint', 'colocation', 'add',
+            'p_vip', 'p_haproxy-clone', 'INFINITY'
+        ]
+    )
+
+def check_host_in_pcs(host, existed_hosts):
+    op_host = existed_hosts[0]
+    distro = hosts.get(op_host)
+    conn = distro.conn
+    host_in_pcs = False
+
+    (out, _, _) = remoto.process.check(
+        conn,
+        ['pcs', 'status', 'nodes']
+    )
+
+    for line in out:
+        if re.search(host, line):
+            host_in_pcs = True
+            break
+
+    return host_in_pcs
+
+def extend_pcs_cluster(host, existed_hosts, hauser, hapass):
+    # add new host should operated on existed hosts
+    op_host = existed_hosts[0]
+    distro = hosts.get(op_host)
+    conn = distro.conn
+
+    (_, _, ret) = remoto.process.check(
+        conn,
+        [
+            'pcs', 'cluster', 'auth',
+            '-u', hauser,
+            '-p', hapass
+        ] + existed_hosts + [host]
+    )
+
+    if ret != 0:
+        raise exc.GenericError('Failed to extend PCS cluster: auth\n')
+
+    (_, _, ret) = remoto.process.check(
+        conn,
+        [
+            'pcs', 'cluster', 'node', 'add',
+            '%s' % host,
+            '--start', '--enable'
+        ]
+    )
+
+    if ret != 0:
+        raise exc.GenericError('Failed to extend PCS cluster: node add\n')
+
+def reload_haproxy(hosts_list):
+    succeed_hosts = []
+
+    for host in hosts_list:
+        distro = hosts.get(host)
+        conn = distro.conn
+
+        LOG.info('Reloading HAProxy service on %s' % host)
+        (_, _, ret) = remoto.process.check(
+            conn,
+            ['systemctl', 'reload', 'haproxy']
+        )
+
+        if ret != 0:
+            LOG.error('Failed to reload HAProxy service on %s' % host)
+        else:
+            succeed_hosts.append(host)
+
+    pending_hosts = [h for h in hosts_list if h not in succeed_hosts]
+    if len(pending_hosts) > 0:
+        raise exc.GenericError('HAProxy not reloaded on following node(s):'
+                               ' %s\n' % (' '.join(pending_hosts)))
+
+def parse_haproxy_listen(haproxy_cfg_list):
+    in_rgw_front = 0
+    haproxy_listen = None
+
+    for line in haproxy_cfg_list:
+        if line == 'frontend rgw_front':
+            in_rgw_front = 1
+        if in_rgw_front == 1:
+            if line != '':
+                m = re.match(r'    bind ([0-9\.]+:[0-9]+)', line)
+                if m:
+                    haproxy_listen = m.group(1)
+                    break
+            else:
+                break
+
+    return haproxy_listen
+
+def get_haproxy_listen(existed_hosts):
+    haproxy_listen_dict = {}
+
+    for host in existed_hosts:
+        distro = hosts.get(host)
+        conn = distro.conn
+        (out, _, ret) = remoto.process.check(
+            conn,
+            ['cat', '/etc/haproxy/haproxy.cfg']
+        )
+
+        if ret != 0:
+            raise exc.GenericError('Failed to read haproxy.cfg on %s\n' % host)
+
+        haproxy_listen_dict[host] = parse_haproxy_listen(out)
+
+    haproxy_listen_values = haproxy_listen_dict.values()
+    if len(set(haproxy_listen_values)) == 1:
+        return haproxy_listen_values[0]
+    else:
+        return None
+
+def eayunrgw_lb_init(args):
+    cfg = conf.ceph.load(args)
+    hosts_list = get_hosts(cfg)
+    vip = args.vip
+    vport = args.vport
+    vip_cidr = args.vip_cidr
+    hauser = args.hauser
+    hapass = args.hapass
+
+    if len(hosts_list) < 3:
+        LOG.error('Failed to init loadbalance cluster. There should be'
+                  ' 3 nodes at least!')
+        raise exc.GenericError("lb-init: not enough nodes (< 3)\n")
+
+    create_haproxy_conf(hosts_list, vip, vport)
+
+    for host in hosts_list:
+        distro = hosts.get(host, username=args.username)
+        conn = distro.conn
+        remoto.process.run(
+            conn,
+            ['systemctl', 'enable', 'haproxy']
+        )
+        remoto.process.run(
+            conn,
+            ['systemctl', 'start', 'haproxy']
+        )
+
+    init_pcs_cluster(hosts_list, vip, vip_cidr, hauser, hapass)
+
+def eayunrgw_lb_extend(args):
+    cfg = conf.ceph.load(args)
+    hosts_list = get_hosts(cfg)
+
+    new_host = args.host
+    hauser = args.hauser
+    hapass = args.hapass
+
+    existed_hosts = [h for h in hosts_list if h != new_host]
+
+    if check_host_in_pcs(new_host, existed_hosts):
+        LOG.info('%s already in EayunOBS loadbalance cluster!' % new_host)
+        return
+
+    haproxy_listen = get_haproxy_listen(existed_hosts)
+    if haproxy_listen == None:
+        raise exc.GenericError('HAProxy listening configuration not matching'
+                               ' across existing nodes\n')
+
+    vip, vport = haproxy_listen.split(':')
+    create_haproxy_conf(hosts_list, vip, vport)
+
+    try:
+        extend_pcs_cluster(new_host, existed_hosts, hauser, hapass)
+    except Exception:
+        LOG.error('Extend pcs cluster failed, roll back to previous HAPorxy'
+                  ' configuration.')
+        create_haproxy_conf(existed_hosts, vip, vport)
+        raise
+
+    haproxy_started_on_new_host = 0
+    retries = 0
+    while retries <= 6:
+        LOG.debug('Checking HAProxy starting on new node: %s' % new_host)
+        distro = hosts.get(new_host)
+        conn = distro.conn
+        (_, _, ret) = remoto.process.check(
+            conn,
+            ['systemctl', 'status', 'haproxy']
+        )
+        if ret == 0:
+            haproxy_started_on_new_host = 1
+            break
+        else:
+            retries += 1
+
+        time.sleep(10)
+
+    if haproxy_started_on_new_host == 0:
+        LOG.error('HAProxy not starting in 60s on %s, you should check'
+                  ' mannually. And after HAProxy is started on new node,'
+                  ' you should reload HAPorxy service on all other'
+                  ' nodes.' % new_host)
+        raise exc.GenericError('Extend LB cluster not completed: HAProxy'
+                               ' not starting on new host in time.\n')
+
+    reload_haproxy(existed_hosts)
+
 def eayunrgw(args):
     if args.subcommand == 'create':
         eayunrgw_create(args)
     elif args.subcommand == 'add':
         eayunrgw_add(args)
-
+    elif args.subcommand == 'lb-init':
+        eayunrgw_lb_init(args)
+    elif args.subcommand == 'lb-extend':
+        eayunrgw_lb_extend(args)
 
 @priority(30)
 def make(parser):
@@ -463,6 +841,65 @@ def make(parser):
         help='The host to which deploy eayun rgw'
         )
 
+    eayunrgw_lb_init = eayunrgw_parser.add_parser(
+        'lb-init',
+        help='Setup EayunOBS loadbalance cluster'
+        )
+    eayunrgw_lb_init.add_argument(
+        '--vip',
+        metavar='VIP',
+        required=True,
+        help='Virutal IP address of EayunOBS loadbalance cluster'
+        )
+    eayunrgw_lb_init.add_argument(
+        '--vip-cidr',
+        metavar='VIP-CIDR',
+        required=True,
+        help=('Virutal IP cidr netmask of EayunOBS loadbalance cluster,'
+              ' e.g., 24 not 255.255.255.0')
+        )
+    eayunrgw_lb_init.add_argument(
+        '--vport',
+        metavar='VPORT',
+        default='80',
+        help='Listening port of EayunOBS loadbalance cluster'
+        )
+    eayunrgw_lb_init.add_argument(
+        '--hauser',
+        metavar='HAUSER',
+        default='hacluster',
+        help='User to setup Pacemaker HA Cluster, default: hacluster'
+        )
+    eayunrgw_lb_init.add_argument(
+        '--hapass',
+        metavar='HAPASSWD',
+        default='hacluster',
+        help='Pacemaker HA Cluster user password, default: hacluster'
+        )
+
+    eayunrgw_lb_extend = eayunrgw_parser.add_parser(
+        'lb-extend',
+        help='Extend EayunOBS loadbalance cluster'
+        )
+    eayunrgw_lb_extend.add_argument(
+        '--host',
+        metavar='HOST',
+        required=True,
+        help='New server to be added to EayunOBS loadbalance cluster'
+        )
+    eayunrgw_lb_extend.add_argument(
+        '--hauser',
+        metavar='HAUSER',
+        default='hacluster',
+        help='User to setup Pacemaker HA Cluster, default: hacluster'
+        )
+    eayunrgw_lb_extend.add_argument(
+        '--hapass',
+        metavar='HAPASSWD',
+        default='hacluster',
+        help='Pacemaker HA Cluster user password, default: hacluster'
+        )
+
     parser.set_defaults(
         func=eayunrgw,
         )
-- 
2.8.0.rc3

